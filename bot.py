import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ò–≥—Ä–∞—Ç—å'."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ò–≥—Ä–∞—Ç—å –≤ Flappy Doge", callback_data="play_game")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Flappy Doge Bot! üê∂ –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—ë—Ç—É? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "play_game")
async def play_game(callback_query: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏."""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_game(callback_query.from_user.id, game_short_name="FlyingWoofbot")

@dp.message(Command("play"))
async def play_command(message: Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /play."""
    await message.answer_game(game_short_name="FlyingWoofbot")

@dp.message(Command("help"))
async def help_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await message.answer("üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/play - –ò–≥—Ä–∞—Ç—å –≤ Flappy Doge\n/help - –ü–æ–º–æ—â—å")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
